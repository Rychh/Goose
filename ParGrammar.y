-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '->' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '<' { PT _ (TS _ 16) }
  '<=' { PT _ (TS _ 17) }
  '=' { PT _ (TS _ 18) }
  '==' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  '>=' { PT _ (TS _ 21) }
  '[' { PT _ (TS _ 22) }
  '\\' { PT _ (TS _ 23) }
  ']' { PT _ (TS _ 24) }
  'break' { PT _ (TS _ 25) }
  'const' { PT _ (TS _ 26) }
  'continue' { PT _ (TS _ 27) }
  'def' { PT _ (TS _ 28) }
  'else' { PT _ (TS _ 29) }
  'error' { PT _ (TS _ 30) }
  'false' { PT _ (TS _ 31) }
  'for' { PT _ (TS _ 32) }
  'honk' { PT _ (TS _ 33) }
  'if' { PT _ (TS _ 34) }
  'lambda' { PT _ (TS _ 35) }
  'println' { PT _ (TS _ 36) }
  'return' { PT _ (TS _ 37) }
  'to' { PT _ (TS _ 38) }
  'true' { PT _ (TS _ 39) }
  'while' { PT _ (TS _ 40) }
  '{' { PT _ (TS _ 41) }
  '||' { PT _ (TS _ 42) }
  '}' { PT _ (TS _ 43) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

String  :: { String }
String   : L_quoted {  $1 }

Program :: { Program }
Program : ListTopDef { AbsGrammar.Program $1 }
TopDef :: { TopDef }
TopDef : 'def' Ident '(' ListArg ')' Block { AbsGrammar.FnDef $2 $4 $6 }
ListTopDef :: { [TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
Arg :: { Arg }
Arg : Ident { AbsGrammar.Arg $1 }
    | 'const' Ident { AbsGrammar.CntsArg $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident ',' ListIdent { (:) $1 $3 }
Block :: { Block }
Block : '{' ListStmt '}' { AbsGrammar.Block (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : ';' { AbsGrammar.Empty }
     | Block { AbsGrammar.BStmt $1 }
     | 'const' Ident '=' Expr { AbsGrammar.DeclCon $2 $4 }
     | 'def' Ident '(' ListArg ')' Block { AbsGrammar.DeclFun $2 $4 $6 }
     | Ident '=' Expr ';' { AbsGrammar.Ass $1 $3 }
     | '(' ListIdent ')' '=' Expr ';' { AbsGrammar.TupleAss $2 $5 }
     | Ident '++' ';' { AbsGrammar.Incr $1 }
     | Ident '--' ';' { AbsGrammar.Decr $1 }
     | 'return' Expr ';' { AbsGrammar.Ret $2 }
     | 'return' ';' { AbsGrammar.VRet }
     | 'if' '(' Expr ')' Stmt { AbsGrammar.Cond $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsGrammar.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsGrammar.While $3 $5 }
     | 'for' '(' Ident '=' Expr 'to' Expr ')' Stmt { AbsGrammar.For $3 $5 $7 $9 }
     | 'break' { AbsGrammar.Break }
     | 'continue' { AbsGrammar.Conti }
     | Expr ';' { AbsGrammar.SExp $1 }
     | 'println' '(' Expr ')' { AbsGrammar.Print $3 }
     | 'honk' '(' Expr ')' { AbsGrammar.Honk $3 }
     | 'error' '(' ')' { AbsGrammar.Error }
Expr7 :: { Expr }
Expr7 : Ident { AbsGrammar.EVar $1 }
      | Integer { AbsGrammar.ELitInt $1 }
      | 'true' { AbsGrammar.ELitTrue }
      | 'false' { AbsGrammar.ELitFalse }
      | Ident '(' ListExpr ')' { AbsGrammar.EApp $1 $3 }
      | String { AbsGrammar.EString $1 }
      | '[' ListExpr ']' { AbsGrammar.EList $2 }
      | '[' Expr ']' '*' Expr { AbsGrammar.EList1 $2 $5 }
      | '(' ListExpr ')' { AbsGrammar.ETuple $2 }
      | Ident '[' Expr ']' { AbsGrammar.EAt $1 $3 }
      | '(' Expr ')' { $2 }
Expr6 :: { Expr }
Expr6 : '-' Expr7 { AbsGrammar.Neg $2 }
      | '!' Expr7 { AbsGrammar.Not $2 }
      | Expr7 { $1 }
Expr5 :: { Expr }
Expr5 : Expr5 MulOp Expr6 { AbsGrammar.EMul $1 $2 $3 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 AddOp Expr5 { AbsGrammar.EAdd $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 RelOp Expr4 { AbsGrammar.ERel $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr3 '&&' Expr2 { AbsGrammar.EAnd $1 $3 } | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 '||' Expr1 { AbsGrammar.EOr $1 $3 } | Expr2 { $1 }
Expr :: { Expr }
Expr : '\\' ListArg '->' Block { AbsGrammar.ELambda $2 $4 }
     | 'lambda' ListArg '->' Block { AbsGrammar.ELambdaS $2 $4 }
     | Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { AbsGrammar.Plus } | '-' { AbsGrammar.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsGrammar.Times }
      | '/' { AbsGrammar.Div }
      | '%' { AbsGrammar.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsGrammar.LTH }
      | '<=' { AbsGrammar.LE }
      | '>' { AbsGrammar.GTH }
      | '>=' { AbsGrammar.GE }
      | '==' { AbsGrammar.EQU }
      | '!=' { AbsGrammar.NE }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

