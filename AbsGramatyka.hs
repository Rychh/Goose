-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGramatyka where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Ident | CntsArg Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | DeclCon Ident Expr
    | DeclFun Ident [Arg] Block
    | Ass Ident Expr
    | TupleAss Ident [Expr]
    | TupleAss1 [Arg] [Expr]
    | TupleAss2 [Arg] Expr
    | Incr Ident
    | Decr Ident
    | Ret Expr
    | RetTuple [Expr]
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | For Ident Expr Expr Stmt
    | ForIn Ident Ident Stmt
    | Break
    | Conti
    | SExp Expr
    | PrInt Expr
    | PrStr Expr
    | Honk Expr
    | Error
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EString String
    | EList [Expr]
    | EList1 Expr Expr
    | EAt Ident Expr
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
    | ELambda [Arg] Block
    | ELambdaS [Arg] Block
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

